API_TOKEN = '7903466278:AAEztSGUXfkc2lwK6OPD_Eeve0tB4NDAqgU'

from aiogram import Bot, types, Dispatcher
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.methods import edit_message_text
from aiogram import F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice, PreCheckoutQuery, Message
from aiogram.enums import ParseMode 
import asyncio

from modules.ip import ip_detect
from modules.phone import russia_num, phnum_parse
from modules.base1 import base1_by_email, base1_by_fio, base1_by_phone
from modules.base2 import base2
from modules.getcontact import get_contact
from modules.base_big import full_search
from modules.osint import social_search, get_telegram_by_username
from aiogram.client.default import DefaultBotProperties
from subs import *

from art import tprint

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

blacklist = ['79912083252']
admin_ids = ['5158396682', '6008247740', '5594962119']

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(API_TOKEN, default=DefaultBotProperties(
        parse_mode=ParseMode.HTML
        # —Ç—É—Ç –µ—â—ë –º–Ω–æ–≥–æ –¥—Ä—É–≥–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    ))
storage = MemoryStorage()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    waiting_for_phone = State()
    waiting_for_ip = State()
    waiting_for_username = State()
    waiting_for_telegram = State()
    waiting_for_email = State()
    waiting_for_fio = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_inline_keyboard(user_id):
    builder = InlineKeyboardBuilder()
    button = types.InlineKeyboardButton(text="üìû –ü—Ä–æ–±–∏–≤ –ø–æ –Ω–æ–º–µ—Ä—É", callback_data='search_by_number')
    button2 = types.InlineKeyboardButton(text="üõú –ü—Ä–æ–±–∏–≤ –ø–æ IP", callback_data='search_by_ip')
    button3 = types.InlineKeyboardButton(text="üí´ –ü–æ–∏—Å–∫ –ø–æ –Ω–∏–∫—É", callback_data='search_by_username')
    button4 = types.InlineKeyboardButton(text="üìï –ü—Ä–æ–±–∏–≤ –ø–æ –§–ò–û", callback_data='search_by_fio')
    admin_button = types.InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data='admin')
    
    builder.row(button, button2)
    builder.row(button3, button4)

    if user_id in admin_ids:
        builder.row(admin_button)

    return builder.as_markup()

def get_admin_keyboard():
    builder = InlineKeyboardBuilder()
    button = types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–º–∏—É–º", callback_data='add')
    builder.row(button)

    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ Python:
@dp.pre_checkout_query()
async def on_pre_checkout_query(
    pre_checkout_query: PreCheckoutQuery
):
    await pre_checkout_query.answer(
        ok=True
    )

async def get_pay_keyboard(message):
    builder = InlineKeyboardBuilder()
    button = types.InlineKeyboardButton(text="–ó–∞–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Stars", callback_data='pay')
    builder.add(button)

    await message.answer("–ö–∞–∂–µ—Ç—Å—è –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å–µ —Å–≤–æ–∏ –ø—Ä–æ–±–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!\n\n‚ö†Ô∏è <b>–û–°–ù–û–í–ù–û–ô –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´</b>\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—Å–∞—Ç—å: @FinishType\n\n‚ö†Ô∏è <b>–°–ü–û–°–û–ë –û–ü–õ–ê–¢–´ –ß–ï–†–ï–ó Stars –ù–ò–ñ–ï</b>\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Stars", reply_markup=builder.as_markup())    
    
@dp.callback_query(F.data == 'pay')
async def stars_pay(callback_query: types.CallbackQuery):
    await callback_query.answer()  # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    message = callback_query.message

    prices = [LabeledPrice(label="XTR", amount=99)]
    await message.answer_invoice(
        title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤–µ—á–Ω–æ",
        description="–í–∞—à —Å—á–µ—Ç –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! ‚ö†Ô∏è –í–´ –ù–ï –°–ú–û–ñ–ï–¢–ï –í–ï–†–ù–£–¢–¨ –ó–í–ï–ó–î–´",
        prices=prices,
        # provider_token –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
        provider_token="",
        # –í –ø–µ–π–ª–æ–∞–π–¥ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ,
        # –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–π–¥–∏ —Ç–æ–≥–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–∫—É–ø–∞–µ—Ç—Å—è
        payload=f"forever_sub",
        # XTR - —ç—Ç–æ –∫–æ–¥ –≤–∞–ª—é—Ç—ã Telegram Stars
        currency="XTR"
    )

@dp.message(F.successful_payment)
async def on_successful_payment(
    message: Message
):
    await message.answer(   
        "<b>–û–≥—Ä–æ–º–Ω–æ–µ —Å–ø–∞—Å–∏–±–æ!</b>\n–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –Ω–∞ —Å—á–µ—Ç—É!",
        message_effect_id="5046509860389126442",
    )

    create_sub_forever(message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def send_welcome(message: types.Message, bot: Bot):
    for j, i in enumerate(subs):
        if int(i['id']) == int(message.from_user.id):
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NumFinder, —É –≤–∞—Å –æ–ø–ª–∞—á–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞! –í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:", reply_markup=get_inline_keyboard(str(message.from_user.id)))
            break
    else:
        if usage_counts.get(message.from_user.id, 0) <= 3: 
            await message.answer("""
            ‚ö†Ô∏è <b>–û–°–ù–û–í–ù–û–ô –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´</b>\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∏—Å–∞—Ç—å: @FinishType\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NumFinder! –í–∞–º –¥–∞–ª–∏ 3 *–ø—Ä–æ–±–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–¥–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!\n–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:\n\n*–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –Ω–∞ –≤—Å–µ–≥–¥–∞, —á–µ—Ä–µ–∑ –æ–ø–ª–∞—Ç—É —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏–ª–∏ –æ–ø–ª–∞—Ç—É –∑–∞ 99 Telegram Stars
            """, reply_markup=get_inline_keyboard(str(message.from_user.id)))
        else:
            await get_pay_keyboard(message)

@dp.callback_query(StateFilter(None), F.data.in_(['search_by_number', 'search_by_ip', 'search_by_fio', 'admin', 'add']))
async def button_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()  # –£–≤–µ–¥–æ–º–ª—è–µ–º Telegram, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω

    if callback_query.data == 'search_by_number':
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        await state.set_state(Form.waiting_for_phone)

    elif callback_query.data == 'search_by_ip':
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä IP –≤ —Ñ–æ—Ä–º–∞—Ç–µ: X.X.X.X")
        await state.set_state(Form.waiting_for_ip)

    elif callback_query.data == 'search_by_fio':
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∏ –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–ê–ú–ò–õ–ò–Ø –ò–ú–Ø –û–¢–ß–ï–°–¢–í–û DD.MM.YYYY")
        await state.set_state(Form.waiting_for_fio)
    
    elif callback_query.data == 'admin':
        await callback_query.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Admin –ø–∞–Ω–µ–ª—å!", reply_markup=get_admin_keyboard())
    
    elif callback_query.data == 'add':
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ @username")
        await state.set_state(Form.waiting_for_username)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ Username
@dp.message(Form.waiting_for_username)
async def process_fio(message: types.Message, state: FSMContext):
    username = message.text.lower()
    id_ = await get_telegram_by_username(username)
    create_sub_forever(str(id_['id']))
    await message.answer(f"<b>–ü–û–î–ü–ò–°–ö–ê –£–°–ü–ï–®–ù–û –í–´–î–ê–ù–ê ID </b> {id_} ‚ö†Ô∏è")
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –§–ò–û
@dp.message(Form.waiting_for_fio)
async def process_fio(message: types.Message, state: FSMContext):
    for j, i in enumerate(subs):
        if int(i['id']) == int(message.from_user.id):
            break
    else:
        if usage_counts.get(message.from_user.id, 0) > 3:
            await get_pay_keyboard(message)
            return

    if len(message.text.lower().split()) != 4:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!", reply_markup=get_inline_keyboard(str(message.from_user.id)))
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    add_usage(message.from_user.id)

    surname, name, patronymic, birth = message.text.lower().split()

    result = {
        "phone": '',
        "name": name,
        "surname": surname,
        "patronymic": '',
        "ip": '',
        "birth": birth
    }
    
    r = await message.answer(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\n‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú")

    seek = False            

    msg = "üîé –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ...\n\n"

    base_big = full_search(result['phone'], result['surname'], result['name'], result['patronymic'], result['ip'])
        
    if base_big != {}:
        result = {**result, **base_big}
        msg += "‚ù§Ô∏è‚Äçüî• –û–±—â–∏–µ –±–∞–∑—ã (–ï—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏):\n"
        msg += f"‚îú IP: {result.get('ip', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –§–∞–º–∏–ª–∏—è: {result.get('surname', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –ò–º—è: {result.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –û—Ç—á–µ—Å—Ç–≤–æ: {result.get('patronymic', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {result.get('birth', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –ê–¥—Ä–µ—Å: {result.get('address', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {result.get('mail_index', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –ù–æ–º–µ—Ä –∏ —Å–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞: {result.get('passport', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îî Email: {result.get('email', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n\n"
    
        find = True

    await bot.edit_message_text(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\nüü©üü©‚¨ú‚¨ú‚¨ú‚¨ú",
                 chat_id=r.chat.id, message_id=r.message_id)

    result1 = base1_by_fio(name=name, surname=surname, patronymic=patronymic, birth=birth)

    if result1 != {}:
        result = {**result, **result1}
        
        msg += "üé≤ –ù–ê–õ–û–ì–û–í–ê–Ø –†–§ (–ë–û–õ–ï–ï –°–í–ï–ñ–ê–Ø):\n"
        msg += f"‚îú –§–∞–º–∏–ª–∏—è: {result['surname']}\n"
        msg += f"‚îú –ò–º—è: {result['name']}\n"
        msg += f"‚îú –û—Ç—á–µ—Å—Ç–≤–æ: {result['patronymic']}\n"
        msg += f"‚îú –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {result['birth']}\n"
        msg += f"‚îú –°–Ω–∏–ª—Å: {result['snils']}\n"
        msg += f"‚îú –ò–ù–ù: {result['inn']}\n"
        msg += f"‚îî Email: {result['email']}\n\n"

        seek = True

    await bot.edit_message_text(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\nüü©üü©üü©‚¨ú‚¨ú‚¨ú",
                chat_id=r.chat.id, message_id=r.message_id)

    base_t2 = full_search(result['phone'], result['surname'], result['name'], result['patronymic'], result['ip'])

    if base_t2 != {}:
        result = {**base_t2, **result}
        msg += "üìï –ë–ê–ó–ê TELE2 (–ï—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏):\n"
        msg += f"‚îú –§–∞–º–∏–ª–∏—è: {result.get('surname', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –ò–º—è: {result.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îî –û—Ç—á–µ—Å—Ç–≤–æ: {result.get('patronymic', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n\n"
    
        find = True

    await bot.edit_message_text(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\nüü©üü©üü©üü©‚¨ú‚¨ú",
                 chat_id=r.chat.id, message_id=r.message_id)

    if result['phone']:
        msg += "üìû –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
        msg += f"‚îú –¢–µ–ª–µ—Ñ–æ–Ω: +{result['phone']}\n"

        if (result['phone'].startswith("+7") or result['phone'].startswith("8") or result['phone'].startswith("7")):
            function = russia_num
        else:
            function = phnum_parse

        for infomation in function(result['phone']):
            result = {**result, **infomation}
            msg += f"‚îú –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {infomation['prov']}\n"
            msg += f"‚îú –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω: {infomation['region']}\n"
            msg += f"‚îú –¢–∞–π–º-–∑–æ–Ω–∞: {infomation['time_zone']}\n"
            msg += f"‚îî –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: {infomation['territory']}\n\n"

            seek = True

    await bot.edit_message_text(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\nüü©üü©üü©üü©üü©‚¨ú",
                 chat_id=r.chat.id, message_id=r.message_id)
            
    social = await social_search(result['name'].lower().title(), result['surname'].lower().title(), result['phone'], result['birth'])

    if social != {}:
        result = {**result, **social}
        msg += "üÜî –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n"
        
        if result.get('telegram', None) and result.get('vk', None) != {}:
            msg += f"‚îú –¢–µ–ª–µ–≥—Ä–∞–º: @{result['telegram']['username']}:\n"

        if result.get('vk', None):
            msg += f"‚îî –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: vk.ru/id{result['vk']['id']}\n"

        seek = True

    await bot.edit_message_text(text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! üí´\nüü©üü©üü©üü©üü©üü©",
                    chat_id=r.chat.id, message_id=r.message_id)

    if not seek:
        await message.answer("–ù–∞–º –∂–∞–ª—å... –ú—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.", reply_markup=get_inline_keyboard(str(message.from_user.id)))
    else:
        await message.answer(msg, reply_markup=get_inline_keyboard(str(message.from_user.id)), message_effect_id="5046509860389126442")
    
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ IP
@dp.message(Form.waiting_for_ip)
async def process_ip(message: types.Message, state: FSMContext):
    for j, i in enumerate(subs):
        if int(i['id']) == int(message.from_user.id):
            break
    else:
        if usage_counts.get(message.from_user.id, 0) > 3:
            await get_pay_keyboard(message)
            return

    add_usage(message.from_user.id)

    ip = message.text
    await message.answer("–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå")
    i = ip_detect(ip)
    if i:
        msg = "üîé –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ...\n\n"

        msg += f"‚ÑπÔ∏è IP: {i['ip']}\n"
        msg += f"‚îú –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {i['prov']}\n"
        msg += f"‚îú –¢–∞–π–º-–∑–æ–Ω–∞: {i['time_zone']}\n"
        msg += f"‚îú –°—Ç—Ä–∞–Ω–∞: {i['country']}"
        msg += f"‚îú –†–µ–≥–∏–æ–Ω: {i['region']}\n"
        msg += f"‚îú –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥: {i['city']}\n"
        msg += f"‚îî –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {i['loc']}\n"
        await message.answer(msg, reply_markup=get_inline_keyboard(str(message.from_user.id)), message_effect_id="5046509860389126442")
    else:
        await message.answer("–ù–∞–º –∂–∞–ª—å... –ú—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.", reply_markup=get_inline_keyboard(str(message.from_user.id)))
    
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(Form.waiting_for_phone)
async def process_phone_number(message: types.Message, state: FSMContext):
    for j, i in enumerate(subs):
        if int(i['id']) == int(message.from_user.id):
            break
    else:
        if usage_counts.get(str(message.from_user.id), 0) > 3:
            await get_pay_keyboard(message)
            return

    if message.text.replace("-", "").replace("(", "").replace(")", "").replace(" ", "").replace("+", "") in blacklist:
        await message.answer("[-] –ù–∞–º –∂–∞–ª—å... –ú—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.", reply_markup=get_inline_keyboard(str(message.from_user.id)))
        await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        return

    add_usage(message.from_user.id)

    phone = message.text.replace("-", "").replace("(", "").replace(")", "").replace(" ", "")

    r = await message.answer("–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\n‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú")

    if (phone.startswith("+7") or phone.startswith("8") or phone.startswith("7")):
        function = russia_num
        phone = phone.replace("+", "")
    else:
        function = phnum_parse

    find = False

    result = {
        "phone": phone,
        "name": '',
        "surname": '',
        "patronymic": '',
        "ip": '',
        "birth": None
    }

    for i in function(phone):
        if "phone" not in i:
            continue

        result = {**result, **i}

        msg = f"üîé –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ...\n\n"

        msg += "üìû –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n"
        msg += f"‚îú –¢–µ–ª–µ—Ñ–æ–Ω: {result['phone']}\n"
        msg += f"‚îú –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result['prov']}\n"
        msg += f"‚îú –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω: {result['region']}\n"
        msg += f"‚îú –¢–∞–π–º-–∑–æ–Ω–∞: {result['time_zone']}\n"
        msg += f"‚îî –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: {result['territory']}\n\n"

        find = True
    
    await bot.edit_message_text(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\nüü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú",
                 chat_id=r.chat.id, message_id=r.message_id)

    base_big = full_search(result['phone'], result['surname'], result['name'], result['patronymic'], result['ip'], result['birth'])
        
    if base_big != {}:
        result = {**result, **base_big}
        msg += "‚ù§Ô∏è‚Äçüî• –û–±—â–∏–µ –±–∞–∑—ã (–ï—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏):\n"
        msg += f"‚îú IP: {result.get('ip', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –§–∞–º–∏–ª–∏—è: {result.get('surname', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –ò–º—è: {result.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –û—Ç—á–µ—Å—Ç–≤–æ: {result.get('patronymic', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {result.get('birth', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –ê–¥—Ä–µ—Å: {result.get('address', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å: {result.get('mail_index', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –ù–æ–º–µ—Ä –∏ —Å–µ—Ä–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞: {result.get('passport', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îî Email: {result.get('email', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n\n"
    
        find = True
    
    await bot.edit_message_text(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\nüü©üü©‚¨ú‚¨ú‚¨ú‚¨ú",
                 chat_id=r.chat.id, message_id=r.message_id)

    base1 = base1_by_phone(result['phone'])
        
    if base1 != {}:
        result = {**result, **base1}
        msg += "üé≤ –ù–ê–õ–û–ì–û–í–ê–Ø –†–§ (–ë–û–õ–ï–ï –°–í–ï–ñ–ê–Ø):\n"
        msg += f"‚îú –ò–º—è: {result['name']}\n"
        msg += f"‚îú –§–∞–º–∏–ª–∏—è: {result['surname']}\n"
        msg += f"‚îú –û—Ç—á–µ—Å—Ç–≤–æ: {result['patronymic']}\n"
        msg += f"‚îú –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {result['birth']}\n"
        msg += f"‚îú Email: {result['email']}\n"
        msg += f"‚îú –°–Ω–∏–ª—Å: {result['snils']}\n"
        msg += f"‚îî –ò–ù–ù: {result['inn']}\n\n"
    
        find = True
    
    await bot.edit_message_text(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\nüü©üü©üü©‚¨ú‚¨ú‚¨ú",
                chat_id=r.chat.id, message_id=r.message_id)
    
    base_t2 = base2(result['phone'], result['surname'], result['name'], result['patronymic'], result['ip'])
        
    if base_t2 != {}:
        result = {**result, **base_big}
        msg += "üìï –ë–ê–ó–ê TELE2 (–ï—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏):\n"
        msg += f"‚îú –§–∞–º–∏–ª–∏—è: {result.get('surname', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îú –ò–º—è: {result.get('name', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        msg += f"‚îî –û—Ç—á–µ—Å—Ç–≤–æ: {result.get('patronymic', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n\n"
    
        find = True
    
    base_contact = get_contact(result['phone'])
        
    if base_contact.get('tags', []) != []:
        result = {**result, **base_contact}
        msg += "ü§ñ –ë–ê–ó–ê GetContact:\n"
        for i, teg in enumerate(base_contact.get('tags', [])):
            if i == len(base_contact.get('tags', []))-1:
                break

            msg += f"‚îú –¢–µ–≥ {i+1}: {teg}\n"

        msg += f"‚îî –¢–µ–≥ {i+1}: {base_contact.get('tags', [])[-1]}\n\n"
    
        find = True
    
    await bot.edit_message_text(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\nüü©üü©üü©üü©‚¨ú‚¨ú",
                 chat_id=r.chat.id, message_id=r.message_id)
    
    if result['ip']:
        i = ip_detect(result['ip'])
        if i:
            result = {**result, **i}
            msg += "üîé IP –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n"
            msg += f"‚îú IP: {result['ip']}\n"
            msg += f"‚îú –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {result['prov']}\n"
            msg += f"‚îú –¢–∞–π–º-–∑–æ–Ω–∞: {result['time_zone']}\n"
            msg += f"‚îú –°—Ç—Ä–∞–Ω–∞: {result['country']}\n"
            msg += f"‚îú –†–µ–≥–∏–æ–Ω: {result['region']}\n"
            msg += f"‚îú –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥: {result['city']}\n"
            msg += f"‚îî –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result['loc']}\n\n"
    
    await bot.edit_message_text(text="–ò–¥–µ—Ç –ø–æ–∏—Å–∫, –æ–∂–∏–¥–∞–π—Ç–µ... üëå\nüü©üü©üü©üü©üü©‚¨ú",
                 chat_id=r.chat.id, message_id=r.message_id)
 
    social = await social_search(result['name'].lower().title(), result['surname'].lower().title(), result['phone'], result['birth'])

    if social != {}:
        result = {**result, **social}
        msg += "üÜî –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:\n"
        
        if result.get('telegram', None) and result.get('vk', None) != {}:
            msg += f"‚îú –¢–µ–ª–µ–≥—Ä–∞–º: @{result['telegram']['username']}:\n"

        if result.get('vk', None):
            msg += f"‚îî –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: vk.ru/id{result['vk']['id']}\n"

        find = True

    await bot.edit_message_text(text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! üí´\nüü©üü©üü©üü©üü©üü©",
                    chat_id=r.chat.id, message_id=r.message_id)

    if not find:
        await message.answer("[-] –ù–∞–º –∂–∞–ª—å... –ú—ã –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏.", reply_markup=get_inline_keyboard(str(message.from_user.id)))
    else:
        await message.answer(msg, reply_markup=get_inline_keyboard(str(message.from_user.id)), message_effect_id="5046509860389126442")
    
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())